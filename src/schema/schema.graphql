scalar Date

enum BroadcastType {
  MEETING_UPDATED
}

enum NotificationType {
  MEETING_CONNECTED
  MEETING_DISCONNECTED
  MEETING_FINISHED
}

type Block {
  userId: ID!
  all: Boolean!
  interests: [String!]!
}

type Group {
  _id: ID!
  name: String!
  open: Boolean!
  owner: ID!
  admins: [ID!]!
  interestsPairs: [[String!]!]!
  interestsDescriptions: [InterestDescription!]!
  usersCount: Int
}

type InterestDescription {
  interest: String!
  description: String!
}

type Meeting {
  _id: ID!
  userId: ID!
  groupId: ID!
  userName: String
  languages: [String!]!
  interests: [String!]!
  timeSlots: [Float!]!
  lastSlotEnd: Float!
  minDurationM: Int!
  preferEarlier: Boolean!
  allowedMales: Boolean!
  allowedFemales: Boolean!
  allowedMinAge: Int!
  allowedMaxAge: Int!
  startTime: Float
  peerMeetingId: String
  linkedToPeer: Boolean
  lastCallTime: Float
  lastMissedCallTime: Float
  totalDurationS: Int
  status: MeetingStatus!
  createdAt: Date
}

enum MeetingStatus {
  SEEKING
  FOUND
  CALLED
  FINISHED
  CANCELLED
}

type User {
  _id: ID!
  groups: [ID!]!
  name: String!
  email: String!
  languages: [String!]!
  createdAt: Float!
  updatedAt: Float!
  about: String!
  contacts: String!
  sex: String!
  birthYear: Int
  blocks: [Block!]!
  friends: [ID!]
  deleted: Boolean
  deletedAt: Float
  pushSubscriptions: [PushSubscription]
}

type CallEvent {
  type: String!
  offer: String
  answer: String
  iceCandidate: String
  from: User!
  userId: ID
  videoEnabled: Boolean
  audioEnabled: Boolean
  quality: String
  callId: ID
  meetingId: ID
  meetingLastCallTime: Float
}

type NotificationEvent {
  type: NotificationType!
  meeting: Meeting
  user: User
}

type BroadcastEvent {
  type: BroadcastType!
}

type Notification {
  _id: ID!
  userId: ID!
  type: String!
  seen: Boolean!
  meetingId: ID
  createdAt: Float!
  meeting: Meeting
  peerUserName: String
}

type SubscriptionEvent {
  callEvent: CallEvent
  notificationEvent: NotificationEvent
  broadcastEvent: BroadcastEvent
}

type Call {
  _id: ID!
  initiatorUserId: ID!
  targetUserId: ID!
  type: String!
  meetingId: ID
  durationS: Int!
}

input UserInput {
  _id: ID!
  name: String!
  languages: [String!]!
  about: String!
  contacts: String!
  sex: String!
  birthYear: Int
  blocks: [BlockInput!]!
  friends: [ID!]
  groups: [ID!]
}

input CallUserInput {
  targetUserId: ID!
  initiatorUserId: ID!
  type: String!  # 'offer' | 'answer' | 'ice-candidate' | 'finished' | 'updateMediaState' | 'expired' | 'reconnect'
  offer: String
  answer: String
  iceCandidate: String
  videoEnabled: Boolean
  audioEnabled: Boolean
  quality: String
  callId: ID
  meetingId: ID
  meetingLastCallTime: Float
}

input BlockInput {
  userId: ID!
  all: Boolean!
  interests: [String!]!
}

input GroupInput {
  _id: ID
  name: String!
  open: Boolean!
  admins: [ID!]!
  interestsPairs: [[String!]!]!
  interestsDescriptions: [InterestDescriptionInput!]!
}

input InterestDescriptionInput {
  interest: String!
  description: String!
}

input MeetingInput {
  _id: ID
  userId: ID!
  userName: String
  languages: [String!]!
  interests: [String!]!
  timeSlots: [Float!]!
  minDurationM: Int!
  preferEarlier: Boolean!
  allowedMales: Boolean!
  allowedFemales: Boolean!
  allowedMinAge: Int!
  allowedMaxAge: Int!
  startTime: Float
  peerMeetingId: ID
  meetingToConnectId: ID
}

type MeetingOutput {
  meeting: Meeting
  error: String
}

type CallHistoryEntry {
  user: User!
  lastCallAt: Float!
  durationS: Int!
  totalCalls: Int!
}

type Query {
  getUser(userId: ID!): User
  getUsers(userId: ID!): [User!]!
  getGroups(userId: ID!): [Group!]!
  getCalls: [Call!]!
  getCallHistory(userId: ID!): [CallHistoryEntry!]!
  getDetailedCallHistory(userId: ID!, targetUserId: ID!): [Call!]!
  getMyMeetingsWithPeers(userId: ID!): [MeetingWithPeer!]!
  getNotifications(userId: ID!): [Notification!]!
  getFutureMeetingsWithPeers(
    userId: ID!
    filterInterests: [String!]
    filterLanguages: [String!]
    filterAllowedMales: Boolean
    filterAllowedFemales: Boolean
    filterMinAge: Int
    filterMaxAge: Int
    filterMinDurationM: Int
  ): [MeetingWithPeer!]!
}

type Mutation {
  updateUser(input: UserInput!): User
  callUser(input: CallUserInput!): CallEvent
  createOrUpdateMeeting(input: MeetingInput!): MeetingOutput!
  createOrUpdateGroup(input: GroupInput!): Group!
  deleteGroup(id: ID!): Boolean!
  updateMeetingStatus(input: UpdateMeetingStatusInput!): Meeting!
  deleteMeeting(id: ID!): DeleteMeetingResponse
  setNotificationSeen(id: ID!): Notification
  setAllNotificationsSeen(userId: ID!): Boolean!
  deleteUser(userId: ID!): Boolean!
}

type Subscription {
  onSubscriptionEvent(userId: ID!): SubscriptionEvent
}

type DeleteMeetingResponse {
  _id: ID!
}

type MeetingWithPeer {
  meeting: Meeting!
  peerMeeting: Meeting
  peerUser: User
}

input UpdateMeetingStatusInput {
  _id: ID!
  status: MeetingStatus
  lastCallTime: Float
  totalDurationS: Int
}

type PushSubscriptionKeys {
  p256dh: String!
  auth: String!
}

type PushSubscription {
  endpoint: String!
  keys: PushSubscriptionKeys!
}

input PushSubscriptionKeysInput {
  p256dh: String!
  auth: String!
}

input PushSubscriptionInput {
  endpoint: String!
  keys: PushSubscriptionKeysInput!
}