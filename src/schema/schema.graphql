enum Status {
  CHAT
  MEET_NEW_PEOPLE
  WANT_TO_SPEAK_OUT
  WANT_TO_LISTEN
  NEED_HELP_WITH_SITUATION
  WANT_TO_HELP_WITH_SITUATION
  SIT_TOGETHER_IN_SILENCE
}

type User {
  userId: ID!
  name: String!
  statuses: [Status!]!
  languages: [String!]!
  timestamp: Float!
  locale: String!
  online: Boolean!
  hasImage: Boolean!
  about: String!
  contacts: String!
  sex: String
  birthYear: Int
  allowedMales: Boolean!
  allowedFemales: Boolean!
  allowedMinAge: Int!
  allowedMaxAge: Int!
}

type ConnectionParams {
  type: String!
  offer: String
  answer: String
  iceCandidate: String
  targetUserId: ID!
  initiatorUserId: ID!
  videoEnabled: Boolean
  audioEnabled: Boolean
  quality: String
  callId: ID
}

type ConnectionRequest {
  type: String!
  offer: String
  answer: String
  iceCandidate: String
  from: User!
  videoEnabled: Boolean
  audioEnabled: Boolean
  quality: String
  callId: ID
}

type Call {
  _id: ID!
  initiatorUserId: ID!
  targetUserId: ID!
  type: String!
  duration: Int!
}

input UpdateUserInput {
  userId: ID!
  name: String!
  statuses: [Status!]!
  languages: [String!]!
  locale: String!
  online: Boolean!
  about: String!
  contacts: String!
  sex: String
  birthYear: Int
  allowedMales: Boolean
  allowedFemales: Boolean
  allowedMinAge: Int
  allowedMaxAge: Int
}

input ConnectionParamsInput {
  targetUserId: ID!
  initiatorUserId: ID!
  type: String!  # 'offer' | 'answer' | 'ice-candidate' | 'finished' | 'updateMediaState' | 'expired' | 'reconnect'
  offer: String
  answer: String
  iceCandidate: String
  videoEnabled: Boolean
  audioEnabled: Boolean
  quality: String
  callId: ID
}

type CallHistoryEntry {
  user: User!
  lastCallAt: Float!
  duration: Int!
  totalCalls: Int!
}

type Query {
  users: [User!]!
  calls: [Call!]!
  getOrCreateUser(userId: ID!, defaultLanguages: [String!]!): User!
  callHistory(userId: ID!): [CallHistoryEntry!]!
  detailedCallHistory(userId: ID!, targetUserId: ID!): [Call!]!
}

type Mutation {
  updateUser(input: UpdateUserInput!): User
  connectWithUser(input: ConnectionParamsInput!): ConnectionParams
}

type Subscription {
  onConnectionRequest(userId: ID!): ConnectionRequest
  onUsersUpdated: [User!]!
} 