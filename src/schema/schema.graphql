scalar Date

enum Interest {
  CHAT
  MEET_NEW_PEOPLE
  NEED_SPEAKING_OUT
  PROVIDE_LISTENING
  MEDITATE_TOGETHER
  PRAY_TOGETHER
  NEED_EMOTIONAL_SUPPORT
  PROVIDE_EMOTIONAL_SUPPORT
  NEED_MENTAL_SUPPORT
  PROVIDE_MENTAL_SUPPORT
}

enum BroadcastType {
  MEETING_UPDATED
}

enum NotificationType {
  MEETING_CONNECTED
  MEETING_DISCONNECTED
  MEETING_FINISHED
}

type Block {
  userId: ID!
  all: Boolean!
  interests: [Interest!]!
}

type Meeting {
  _id: ID!
  userId: ID!
  userName: String
  languages: [String!]!
  interests: [Interest!]!
  timeSlots: [Float!]!
  lastSlotEnd: Float!
  minDurationM: Int!
  preferEarlier: Boolean!
  allowedMales: Boolean!
  allowedFemales: Boolean!
  allowedMinAge: Int!
  allowedMaxAge: Int!
  startTime: Float
  peerMeetingId: String
  lastCallTime: Float
  lastMissedCallTime: Float
  totalDurationS: Int
  status: MeetingStatus!
  createdAt: Date
}

enum MeetingStatus {
  SEEKING
  FOUND
  CALLED
  FINISHED
  CANCELLED
}

type User {
  _id: ID!
  name: String!
  email: String!
  languages: [String!]!
  createdAt: Float!
  updatedAt: Float!
  about: String!
  contacts: String!
  sex: String!
  birthYear: Int
  blocks: [Block!]!
  friends: [ID!]
  deleted: Boolean
  deletedAt: Float
}

type CallEvent {
  type: String!
  offer: String
  answer: String
  iceCandidate: String
  from: User!
  userId: ID
  videoEnabled: Boolean
  audioEnabled: Boolean
  quality: String
  callId: ID
  meetingId: ID
  meetingLastCallTime: Float
}

type NotificationEvent {
  type: NotificationType!
  meeting: Meeting
  user: User
}

type BroadcastEvent {
  type: BroadcastType!
}

type Notification {
  _id: ID!
  userId: ID!
  type: String!
  seen: Boolean!
  meetingId: ID
  createdAt: Float!
  meeting: Meeting
  peerUserName: String
}

type SubscriptionEvent {
  callEvent: CallEvent
  notificationEvent: NotificationEvent
  broadcastEvent: BroadcastEvent
}

type Call {
  _id: ID!
  initiatorUserId: ID!
  targetUserId: ID!
  type: String!
  meetingId: ID
  durationS: Int!
}

input UserInput {
  _id: ID!
  name: String!
  languages: [String!]!
  about: String!
  contacts: String!
  sex: String!
  birthYear: Int
  blocks: [BlockInput!]!
  friends: [ID!]
}

input CallUserInput {
  targetUserId: ID!
  initiatorUserId: ID!
  type: String!  # 'offer' | 'answer' | 'ice-candidate' | 'finished' | 'updateMediaState' | 'expired' | 'reconnect'
  offer: String
  answer: String
  iceCandidate: String
  videoEnabled: Boolean
  audioEnabled: Boolean
  quality: String
  callId: ID
  meetingId: ID
  meetingLastCallTime: Float
}

input BlockInput {
  userId: ID!
  all: Boolean!
  interests: [Interest!]!
}

input MeetingInput {
  _id: ID
  userId: ID!
  userName: String
  languages: [String!]!
  interests: [Interest!]!
  timeSlots: [Float!]!
  minDurationM: Int!
  preferEarlier: Boolean!
  allowedMales: Boolean!
  allowedFemales: Boolean!
  allowedMinAge: Int!
  allowedMaxAge: Int!
  startTime: Float
  peerMeetingId: ID
}

type CallHistoryEntry {
  user: User!
  lastCallAt: Float!
  durationS: Int!
  totalCalls: Int!
}

type Query {
  getUser(userId: ID!): User
  getUsers(userId: ID!): [User!]!
  getCalls: [Call!]!
  getCallHistory(userId: ID!): [CallHistoryEntry!]!
  getDetailedCallHistory(userId: ID!, targetUserId: ID!): [Call!]!
  getMyMeetingsWithPeers(userId: ID!): [MeetingWithPeer!]!
  getNotifications(userId: ID!): [Notification!]!
  getFutureMeetingsWithPeers(userId: ID!): [MeetingWithPeer!]!
}

type Mutation {
  updateUser(input: UserInput!): User
  callUser(input: CallUserInput!): CallEvent
  createOrUpdateMeeting(input: MeetingInput!): Meeting
  updateMeetingStatus(input: UpdateMeetingStatusInput!): Meeting!
  deleteMeeting(id: ID!): DeleteMeetingResponse
  setNotificationSeen(id: ID!): Notification
  setAllNotificationsSeen(userId: ID!): Boolean!
  deleteUser(userId: ID!): Boolean!
}

type Subscription {
  onSubscriptionEvent(userId: ID!): SubscriptionEvent
}

type DeleteMeetingResponse {
  _id: ID!
}

type MeetingWithPeer {
  meeting: Meeting!
  peerMeeting: Meeting
  peerUser: User
}

input UpdateMeetingStatusInput {
  _id: ID!
  status: MeetingStatus
  lastCallTime: Float
  totalDurationS: Int
} 