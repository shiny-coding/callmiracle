enum Status {
  CHAT
  MEET_NEW_PEOPLE
  WANT_TO_SPEAK_OUT
  WANT_TO_LISTEN
  NEED_HELP_WITH_SITUATION
  WANT_TO_HELP_WITH_SITUATION
  SIT_TOGETHER_IN_SILENCE
}

type User {
  userId: ID!
  name: String!
  statuses: [Status!]!
  languages: [String!]!
  timestamp: Float!
  locale: String!
  online: Boolean!
}

type ConnectionParams {
  type: String!
  offer: String
  answer: String
  iceCandidate: String
  targetUserId: ID!
  initiatorUserId: ID!
  videoEnabled: Boolean
  audioEnabled: Boolean
  quality: String
}

type ConnectionRequest {
  type: String!
  offer: String
  answer: String
  iceCandidate: String
  from: User!
  videoEnabled: Boolean
  audioEnabled: Boolean
  quality: String
}

input UpdateUserInput {
  userId: ID!
  name: String!
  statuses: [Status!]!
  languages: [String!]!
  locale: String!
  online: Boolean!
}

input ConnectionParamsInput {
  targetUserId: ID!
  initiatorUserId: ID!
  type: String!  # 'offer' | 'answer' | 'ice-candidate' | 'finished' | 'changeTracks' | 'expired'
  offer: String
  answer: String
  iceCandidate: String
  videoEnabled: Boolean
  audioEnabled: Boolean
  quality: String
}

type Query {
  users: [User!]!
}

type Mutation {
  updateUser(input: UpdateUserInput!): User
  connectWithUser(input: ConnectionParamsInput!): ConnectionParams
}

type Subscription {
  onConnectionRequest(userId: ID!): ConnectionRequest
  onUsersUpdated: [User!]!
} 